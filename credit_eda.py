# -*- coding: utf-8 -*-
"""Credit EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QGhxrNg4A9_aFmPDWmjFPsEifbHN09YC
"""

# Commented out IPython magic to ensure Python compatibility.
import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
pd.set_option("display.max_columns",None)

app_data = pd.read_csv("application_data.csv")
app_data.head()

app_data.info()

pd.set_option('display.max_rows',200)
app_data.isnull().mean()*100

percentage = 47
threshold = int(((100 - percentage) / 100) * app_data.shape[0] + 1)
app_df = app_data.dropna(axis=1, thresh=threshold)
app_df.head()

app_df.shape

app_df.isnull().mean()*100

app_df.OCCUPATION_TYPE.isnull().mean()*100

app_df.OCCUPATION_TYPE.value_counts(normalize=True)*100

app_df.EXT_SOURCE_3.isnull().mean()*100

app_df.EXT_SOURCE_3.describe()

sns.boxplot(app_df.EXT_SOURCE_3)
plt.show()

app_df.EXT_SOURCE_3.fillna(app_df.EXT_SOURCE_3.median(), inplace =True)
app_df.EXT_SOURCE_3.isnull().mean()*100
app_df.EXT_SOURCE_3.value_counts (normalize=True)*100

null_cols=list(app_df.isna().any())
len(null_cols)
app_df.isnull().mean()*100

app_df.AMT_REQ_CREDIT_BUREAU_HOUR.value_counts (normalize =True) *100
app_df.AMT_REQ_CREDIT_BUREAU_DAY.value_counts (normalize =True) *100

Cols =["AMT_REQ_CREDIT_BUREAU_HOUR", "AMT_REQ_CREDIT_BUREAU_DAY","AMT_REQ_CREDIT_BUREAU_WEEK", "AMT_REQ_CREDIT_BUREAU_MON", "AMT_REQ_CREDIT_BUREAU_QRT","AMT_REQ_CREDIT_BUREAU_YEAR "]

Cols =["AMT_REQ_CREDIT_BUREAU_HOUR", "AMT_REQ_CREDIT_BUREAU_DAY","AMT_REQ_CREDIT_BUREAU_WEEK", "AMT_REQ_CREDIT_BUREAU_MON", "AMT_REQ_CREDIT_BUREAU_QRT","AMT_REQ_CREDIT_BUREAU_YEAR"]

for col in Cols:
  app_df[col].fillna(app_df[col].mode()[0], inplace=True)

app_df.isnull().mean()*100

null_cols=list(app_df.columns[app_df.isna().any()])
len(null_cols)

app_df.NAME_TYPE_SUITE.value_counts(normalize=True)*100

app_df.EXT_SOURCE_2.value_counts(normalize=True)*100

app_df.OBS_30_CNT_SOCIAL_CIRCLE.value_counts(normalize=True)*100

app_df.NAME_TYPE_SUITE.fillna(app_df.NAME_TYPE_SUITE.mode()[0], inplace=True)

app_df.CNT_FAM_MEMBERS.fillna(app_df.CNT_FAM_MEMBERS.mode()[0], inplace=True)

app_df.EXT_SOURCE_2.fillna(app_df.EXT_SOURCE_2.median(), inplace=True)
app_df.AMT_GOODS_PRICE.fillna(app_df.AMT_GOODS_PRICE.median(), inplace=True)
app_df.AMT_ANNUITY.fillna (app_df.AMT_ANNUITY.median(), inplace=True)
app_df.DEF_60_CNT_SOCIAL_CIRCLE.fillna(app_df.DEF_60_CNT_SOCIAL_CIRCLE.median(), inplace=True)
app_df.DEF_30_CNT_SOCIAL_CIRCLE.fillna(app_df.DEF_30_CNT_SOCIAL_CIRCLE.median(), inplace= True)
app_df.OBS_30_CNT_SOCIAL_CIRCLE.fillna(app_df.OBS_30_CNT_SOCIAL_CIRCLE.median(), inplace=True)
app_df.OBS_60_CNT_SOCIAL_CIRCLE.fillna(app_df.OBS_60_CNT_SOCIAL_CIRCLE.median(), inplace=True)
app_df.DAYS_LAST_PHONE_CHANGE.fillna(app_df.DAYS_LAST_PHONE_CHANGE.median(), inplace=True)

null_cols=list(app_df.columns[app_df.isna().any()])
len(null_cols)

app_df.DAYS_BIRTH =app_df.DAYS_BIRTH.apply(lambda x: abs(x))
app_df.DAYS_EMPLOYED =app_df.DAYS_EMPLOYED.apply(lambda x: abs(x))
app_df.DAYS_ID_PUBLISH =app_df.DAYS_ID_PUBLISH.apply(lambda x: abs(x))
app_df.DAYS_LAST_PHONE_CHANGE =app_df.DAYS_LAST_PHONE_CHANGE.apply(lambda x: abs(x))
app_df.DAYS_REGISTRATION =app_df.DAYS_REGISTRATION.apply(lambda x: abs(x))

app_df ["YEARS_BIRTH"] =app_df.DAYS_BIRTH.apply(lambda x: int(x//356))
app_df["YEARS_EMPLOYED"] =app_df.DAYS_EMPLOYED.apply(lambda x: int(x//356))
app_df["YEARS_REGISTRATION"]= app_df.DAYS_REGISTRATION.apply(lambda x: int(x//356))
app_df["YEARS_ID_PUBLISH"] =app_df.DAYS_ID_PUBLISH.apply(lambda x: int(x//356))
app_df["YEARS_LAST_PHONE_CHANGE"] =app_df.DAYS_LAST_PHONE_CHANGE.apply(lambda x: int(x//356))

app_df.AMT_CREDIT.value_counts(normalize=True)*100

app_df.AMT_CREDIT.describe()

app_df["AMT_CREDIT_Category"]=pd.cut(app_df.AMT_CREDIT, [0, 200000, 400000, 600000, 800000, 1000000],
                                 labels= ["Very low Credit", "Low Credit", "Medium Credit", "High Credit", "Very High Credit"])

app_df.AMT_CREDIT_Category.value_counts(normalize=True)*100

app_df["AMT_CREDIT_Category"].value_counts(normalize=True).plot.bar()
plt.show()

app_df["AGE_Category"] =pd.cut(app_df.YEARS_BIRTH, [0, 25, 45, 65, 85],
                               labels= ["Below 25", "25-45", "45-65", "65-85"])

app_df.AGE_Category.value_counts(normalize=True)*100

app_df["AGE_Category"] =pd.cut(app_df.YEARS_BIRTH, [0, 25, 45, 65, 85],
                               labels= ["Below 25", "25-45", "45-65", "65-85"])
# Convert to string to handle potential NaNs or inconsistent data types
app_df["AGE_Category"] = app_df["AGE_Category"].astype(str)
app_df["AGE_Category"].value_counts(normalize=True).plot.pie(autopct ='%1.2f%%')
plt.show()

app_df.head()

tar_0=app_df[app_df.TARGET==0]
tar_1=app_df[app_df.TARGET==1]

app_df.TARGET.value_counts(normalize=True)*100

